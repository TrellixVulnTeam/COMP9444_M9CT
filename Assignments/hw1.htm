<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML>
<HEAD>
<TITLE>COMP9444 Project 1</TITLE>
</HEAD>
<BODY LANG="EN">
<h2 align=center>COMP9444 Neural Networks and Deep Learning</h2>
<h2 align=center>Session 2, 2017</h2>
<H3 align=center>Project 1 - Digit Recognition</H3>
<p align=center>
Due: Sunday 3 September, 23:59 pm
<br align=center>
Marks: 10% of final assessment
<p>

<h4>Introduction</h4>

In this assignment, you will be implementing a single layer network,
a two layer network and a convolutional network to classify handwritten digits.
We will work with the MNIST dataset, a common dataset used to evaluate
Machine Learning models.
<p>

<h4>Preliminaries</h4>

Before commencing this assignment, you should download and
install TensorFlow, and the appropriate python version. It is also
helpful to complete the 'MNIST for beginners' tutorial located on the
TensorFlow website
<a href="https://www.tensorflow.org/get_started/mnist/beginners">https://www.tensorflow.org/get_started/mnist/beginners</a>
<p>

TensorFlow (TF) is an opensource library primarily used to construct, train and
    evaluate machine learning models. TF allows rapid development and
    supports automatic differentiation - meaning backprop is able to be done
    automatically for any model adequately defined. TF also abstracts away
    much of the low-level code required to set up training on GPU's;
    in many cases TF will automatically detect and utilize your computer's
    GPU if it has one. Central to the design of TF is the concept of a
    'graph' - a low level representation of a model consisting of nodes and
    tensors. Broadly, implementing a TF model can be broken down into two
    sections; creating the graph, and training/testing it. This assignment is
    mainly concerned with graph creation. You can read more about the general
    structure of TensorFlow  <a
        href="https://www.tensorflow.org/get_started/get_started"> here</a>.

<h4>Getting Started</h4>

Copy the archive <a href="./src.zip"><code>src.zip</code></a>
into your own filespace and unzip it. Then type
<pre>
cd src
</pre>

You will see two files: <code>train.py</code>&nbsp; and &nbsp;<code>hw1.py</code>
<p>
Now run &nbsp;<code>train.py</code>&nbsp; by typing
<pre>
python3 train.py
</pre>
When run for the first time, &nbsp;<code>train.py</code>&nbsp; should create a new folder
called &nbsp;<code>data</code>&nbsp; and download a copy of the MNIST dataset into this folder.
All subsequent runs of &nbsp;<code>train.py</code>&nbsp; will use this local data.
(Don't worry about the &nbsp;<code>ValueError</code>&nbsp; at this stage.)
<p>
 The file &nbsp;<code>train.py</code>&nbsp; contains the TensorFlow code required to
 create a session, build the graph, and run training and test
 iterations. It has been provided to assist you with the testing and
 evaluation of your model. While it is not required for this
 assignment to have a detailed understanding of this code, it will be
 useful when implementing your own models, and for later assignments.
<p>
 The file &nbsp;<code>train.py</code>&nbsp; calls functions defined in
<code>hw1.py</code>&nbsp; and should not be modified during the course of
 the assignment.
 A submission that does not run correctly when
 &nbsp;<code>train.py</code>&nbsp; is called will lose marks.
 The only situation where you should modify &nbsp;<code>train.py</code>&nbsp; is when
 you need to switch between different network architectures.
 This can be done by setting the global variable on line 7:
<pre>
network = "none"
</pre>
to any of the following values:
<pre>
network = "onelayer"
network = "twolayer"
network = "conv"
</pre>
 The file &nbsp;<code>hw1.py</code>&nbsp; contains function definitions for the three networks to
 be created. You may also define helper functions in this file if necessary,
 as long as the original function names and arguments are not modified.
 Changing the function name, argument list, or return value will cause all
 tests to fail for that function. Your marks will be automatically generated
 by a test script, which will evaluate the correctness of the implemented
 networks. For this reason, it is important that you stick to the
 specification exactly. Networks that do not meet the specifications
 but otherwise function accurately, will be marked as incorrect.

<h4>Stage 0: Provided Code</h4>

 The functions &nbsp;<code>input_placeholder()</code>&nbsp; and
<code>target_placeholder()</code>&nbsp; specify the inputs and outpus of
 your networks in the TensorFlow graph.
 They have been implemented for you.
<p>
  In addition, there is a function &nbsp;<code>train_step()</code>&nbsp; that passes
  batches of images to the constructed TensorFlow Graph during training.
  It's implementation should help you understand the shape and structure of
  the actual data that is being provided to the model.
<p>
 Unless otherwise specified, the underlying type (<code>dtype</code>)
 for each TF object should be &nbsp;<code>float32</code>.
 &nbsp;<code>INPUT_SIZE</code>, where it appears in comments, refers to the length of a
 flattened single image; in this case 784.  &nbsp;<code>OUTPUT_SIZE</code>, where it appears in
 comments, refers to the length of a one-hot output vector; in this case 10.
<p>
 In the provided file &nbsp;<code>hw1.py</code>, detailed specifications are provided
 in the comments for each function.
<p>

<h4>Stage 1: Single-Layer Network (3 marks)</h4>

 Write a function &nbsp;<code>onelayer(X, Y, layersize=10)</code>&nbsp; which creates a
TensorFlow model for a one layer neural network (sometimes also called
logistic regression).
 Your model should consist of one fully connected layer with weights
<code>w</code>&nbsp; and biases &nbsp;<code>b</code>, using
<a href="https://en.wikipedia.org/wiki/Softmax_function">softmax</a> activation.
<p>
 Your function should take two parameters &nbsp;<code>X</code>&nbsp; and &nbsp;<code>Y</code>
that are TensorFlow placeholders as defined in &nbsp;<code>input_placeholder()</code>&nbsp; and
<code>target_placeholder()</code>.
It should return varibles &nbsp;<code>w, b, logits, preds</code>,
<code>batch_xentropy</code>&nbsp; and &nbsp;<code>batch_loss</code>,
where:
<ul>
<li> &nbsp;<code>w</code>&nbsp; and &nbsp;<code>b</code>&nbsp; are TensorFlow variables
representing the weights and biases, respectively
<li> &nbsp;<code>logits</code>&nbsp; and &nbsp;<code>preds</code>&nbsp; are the
input to the activation function and its output
<li> &nbsp;<code>xentropy_loss</code>&nbsp; is the cross-entropy loss for each image in the batch
<li> &nbsp;<code>batch_loss</code>&nbsp; is the average of the cross-entropy loss for
all images in the batch
</ul>

Change line 7 of &nbsp;<code>train.py</code>&nbsp; to
<code>network = "onelayer"</code>
and test your network on the MNIST dataset by typing
<pre>
python3 train.py
</pre>
It should achieve about 92% accuracy after 5 epochs of training.
<p>
It is a good idea to submit your code after completing Stage 1,
because the submit script will run some simple tests and give you
some feedback on whether your model is correctly structured.

<h4>Stage 2: Two-Layer Network (3 marks)</h4>

Create a TensorFlow model for a Neural Network with two fully connected
layers of weights &nbsp;<code>w1, w2</code>&nbsp; and biases &nbsp;<code>b1, b2</code>,
with <a "href=https://en.wikipedia.org/wiki/Rectifier_(neural_networks)">ReLU</a>
activation functions on the first layer, and softmax on the second.

 Your function should take two parameters &nbsp;<code>X</code>&nbsp; and &nbsp;<code>Y</code>
that are TensorFlow placeholders as defined in &nbsp;<code>input_placeholder()</code>&nbsp; and
<code>target_placeholder()</code>.
It should return varibles &nbsp;<code>w1, b1, w2, b2, logits, preds</code>,
<code>batch_xentropy</code>&nbsp; and &nbsp;<code>batch_loss</code>,
where:
<ul>
<li> &nbsp;<code>w1</code>&nbsp; and &nbsp;<code>b1</code>&nbsp; are TensorFlow variables
representing the weights and biases of the first layer
<li> &nbsp;<code>w2</code>&nbsp; and &nbsp;<code>b2</code>&nbsp; are TensorFlow variables
representing the weights and biases of the second layer
<li> &nbsp;<code>logits</code>&nbsp; and &nbsp;<code>preds</code>&nbsp; are the
inputs to the final activation functions and their output
<li> &nbsp;<code>xentropy_loss</code>&nbsp; is the cross-entropy loss for each image in the batch
<li> &nbsp;<code>batch_loss</code>&nbsp; is the average of the cross-entropy loss for
all images in the batch
</ul>
Change line 7 of &nbsp;<code>train.py</code>&nbsp; to
<code>network = "twolayer"</code>
and test your network on the MNIST dataset by typing
<pre>
python3 train.py
</pre>
Note: if you are using the CSE Lab machines and are running
out of memory, you may like to remove the files in the
&nbsp;<code>summaries</code>&nbsp; directory from previous
training runs.

<h4>Stage 4: Convolutional Network (4 marks)</h4>

 Create a TensorFlow model for a Convolutional Neural Network.
 This network should consist of two convolutional layers followed by a fully
 connected layer of the form:
<blockquote>
 conv_layer1 &rarr; conv_layer2 &rarr; fully-connected &rarr; output
</blockquote>
  Your function should take two parameters &nbsp;<code>X</code>&nbsp; and &nbsp;<code>Y</code>
that are TensorFlow placeholders as defined in &nbsp;<code>input_placeholder()</code>&nbsp; and
<code>target_placeholder()</code>.
It should return varibles &nbsp;<code>conv1, conv2, w, b, logits, preds</code>,
<code>batch_xentropy</code>&nbsp; and &nbsp;<code>batch_loss</code>,
where:
<ul>
<li> &nbsp;<code>conv1</code>&nbsp; is a convolutional layer of
&nbsp;<code>convlayer_sizes[0]</code>&nbsp; filters of shape &nbsp;<code>filter_shape</code>
<li> &nbsp;<code>conv2</code>&nbsp; is a convolutional layer of
&nbsp;<code>convlayer_sizes[1]</code>&nbsp; filters of shape
&nbsp;<code>filter_shape</code>
<li> &nbsp;<code>w</code>&nbsp; and &nbsp;<code>b</code>&nbsp; are TensorFlow variables
representing the weights and biases of the final fully connected layer
<li> &nbsp;<code>logits</code>&nbsp; and &nbsp;<code>preds</code>&nbsp; are the
inputs to the final activation functions and their output
<li> &nbsp;<code>xentropy_loss</code>&nbsp; is the cross-entropy loss for each image in the batch
<li> &nbsp;<code>batch_loss</code>&nbsp; is the average of the cross-entropy loss for
all images in the batch
</ul>

Hints:
<ol>
<li> use <code>tf.layer.conv2d</code>
<li> the final layer is very similar to the
&nbsp;<code>onelayer</code>&nbsp; network, except that
the input will be from the
&nbsp<code>conv2</code>&nbsp; layer. If you reshape the
&nbsp<code>conv2</code>&nbsp; output using
&nbsp;<code>tf.reshape</code>, you should be able to call
&nbsp;<code>onelayer()</code>&nbsp;
to get the final layer of your network
</ol>

Change line 7 of &nbsp;<code>train.py</code>&nbsp; to
<code>network = "conv"</code>
and test your network on the MNIST dataset by typing
<pre>
python3 train.py
</pre>
It may take several minutes to run, depending on your processor.

<h4>Notes</h4>

All TensorFlow objects, if not otherwise specified, should be explicity
created with &nbsp;<code>tf.float32</code>&nbsp; datatypes.
Not specifying this datatype for variables and
placeholders will cause your code to fail some tests.
<p>
TensorFlow provides multiple API's, at various levels of abstraction. For the
    specified functionality in this assignment, there are generally high
level TensorFlow library calls that can be used. As we are assessing TensorFlow,
functionality that is technically correct but implemented manually, using a
library such as
&nbsp;<code>numpy</code>, will fail tests. If you find yourself writing 50+ line
methods, it may be a good idea to look for a simpler solution.
<p>

<h4>Visualizing Your Models</h4>

In addition to the output of &nbsp;<code>train.py</code>, you can view the progress
of your models and the created TensorFlow graph
using the TensorFlow visualization platform, TensorBoard.
After beginning training, run the following command from the src directory:
<pre>
python3 -m tensorflow.tensorboard --logdir=./summaries
</pre>
Depending on your installation, the following command might also work:
<pre>
tensorboard --logdir=./summaries
</pre>
<ol>
 <li> open a Web browser and navigate to &nbsp;<code>http://localhost:6006</code>
 <li> you should be able to see a plot of the train and test accuracies in TensorBoard</li>
 <li> if you click on the histogram tab you'll also see some histograms of
    your weights, biases and the pre-activation inputs to the softmax in the final layer</li>
</ol>
    Make sure you are in the same directory from which train.py is running.
    Don't worry if you are unable to get TensorBoard working;
    it is not required to complete the assignment, but it can be a useful tool
    to monitor training, so it is probably worth your while becoming familiar with it. Click
<a href="https://www.tensorflow.org/get_started/summaries_and_tensorboard">here</a> for more information:

<h4>Submission</h4>

You can test your code by typing
<pre>
python3 train.py
</pre>

Once submissions are open, you should submit by typing
<p>
<code>give cs9444 hw1 myfile.py</code>
<p>
(Your file can have any name, but must end in <code>.py</code>)
<p>
When you submit, you will see some feedback for Stage 1,
which you can use to check that you are structuring your code correctly.
<p>
You can submit as many times as you like - later submissions
will overwrite earlier ones. You can check that your submission
has been received by using the following command:
<P>
<code>9444 classrun -check</code>
<P>
The submission deadline is Sunday 3 September, 23:59.<br>
15% penalty will be applied to the (maximum) mark
for every 24 hours late after the deadline.
<P>
Additional information may be found in the
<a href="faq.shtml">FAQ</a>
and will be considered as part of the specification for the project.
<P>
Questions relating to the project can also be posted to the
Forums on the course Web page.
<p>
If you have a question that has not already been answered on the FAQ
or the Forums, you can email it to
<code>alex.long@student.unsw.edu.au</code>

<p>
You should always adhere to good coding practices and style.
In general, a program that attempts a substantial
part of the job but does that part correctly
will receive more marks than one attempting to do
the entire job but with many errors.

<h4>Plagiarism Policy</h4>
<p>
Group submissions will not be allowed.
Your program must be entirely your own work.
Plagiarism detection software will be used to compare all submissions pairwise
and serious penalties will be applied, particularly in the case
of repeat offences.
<p>
<b>DO NOT COPY FROM OTHERS; DO NOT ALLOW ANYONE TO SEE YOUR CODE</b>
<p>
Please refer to the
<a href="https://student.unsw.edu.au/plagiarism">UNSW Policy on Academic Honesty and Plagiarism</a>
if you require further clarification on this matter.
<P>
<P>
Good luck!
<br>
<HR>
</BODY>
</HTML>
